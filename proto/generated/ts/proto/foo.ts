// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Foo implements flatbuffers.IUnpackableObject<FooT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Foo {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:Foo):Foo {
  return (obj || new Foo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:Foo):Foo {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Foo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

foo():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startFoo(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addFoo(builder:flatbuffers.Builder, foo:bigint) {
  builder.addFieldInt64(0, foo, BigInt('0'));
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static create(builder:flatbuffers.Builder, foo:bigint):flatbuffers.Offset {
  Foo.startFoo(builder);
  Foo.addFoo(builder, foo);
  return Foo.end(builder);
}

unpack(): FooT {
  return new FooT(
    this.foo()
  );
}


unpackTo(_o: FooT): void {
  _o.foo = this.foo();
}
}

export class FooT implements flatbuffers.IGeneratedObject {
constructor(
  public foo: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Foo.create(builder,
    this.foo
  );
}
}
