// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerErrorMsgOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerErrorMsg<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerErrorMsg<'a> {
  type Inner = ServerErrorMsg<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerErrorMsg<'a> {
  pub const VT_ROWS: flatbuffers::VOffsetT = 4;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ServerErrorMsg"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerErrorMsg { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ServerErrorMsgArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerErrorMsg<'bldr>> {
    let mut builder = ServerErrorMsgBuilder::new(_fbb);
    if let Some(x) = args.rows { builder.add_rows(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ServerErrorMsgT {
    let rows = self.rows().map(|x| {
      x.iter().map(|t| t.unpack()).collect()
    });
    ServerErrorMsgT {
      rows,
    }
  }

  #[inline]
  pub fn rows(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ServerErrorMsgRow<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ServerErrorMsgRow>>>>(ServerErrorMsg::VT_ROWS, None)}
  }
}

impl flatbuffers::Verifiable for ServerErrorMsg<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ServerErrorMsgRow>>>>("rows", Self::VT_ROWS, false)?
     .finish();
    Ok(())
  }
}
pub struct ServerErrorMsgArgs<'a> {
    pub rows: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ServerErrorMsgRow<'a>>>>>,
}
impl<'a> Default for ServerErrorMsgArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerErrorMsgArgs {
      rows: None,
    }
  }
}

pub struct ServerErrorMsgBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerErrorMsgBuilder<'a, 'b> {
  #[inline]
  pub fn add_rows(&mut self, rows: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ServerErrorMsgRow<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerErrorMsg::VT_ROWS, rows);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerErrorMsgBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerErrorMsgBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerErrorMsg<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerErrorMsg<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerErrorMsg");
      ds.field("rows", &self.rows());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ServerErrorMsgT {
  pub rows: Option<Vec<ServerErrorMsgRowT>>,
}
impl Default for ServerErrorMsgT {
  fn default() -> Self {
    Self {
      rows: None,
    }
  }
}
impl ServerErrorMsgT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ServerErrorMsg<'b>> {
    let rows = self.rows.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    ServerErrorMsg::create(_fbb, &ServerErrorMsgArgs{
      rows,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ServerErrorMsg`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_server_error_msg_unchecked`.
pub fn root_as_server_error_msg(buf: &[u8]) -> Result<ServerErrorMsg, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ServerErrorMsg>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ServerErrorMsg` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_server_error_msg_unchecked`.
pub fn size_prefixed_root_as_server_error_msg(buf: &[u8]) -> Result<ServerErrorMsg, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ServerErrorMsg>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ServerErrorMsg` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_server_error_msg_unchecked`.
pub fn root_as_server_error_msg_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ServerErrorMsg<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ServerErrorMsg<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ServerErrorMsg` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_server_error_msg_unchecked`.
pub fn size_prefixed_root_as_server_error_msg_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ServerErrorMsg<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ServerErrorMsg<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ServerErrorMsg and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ServerErrorMsg`.
pub unsafe fn root_as_server_error_msg_unchecked(buf: &[u8]) -> ServerErrorMsg {
  flatbuffers::root_unchecked::<ServerErrorMsg>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ServerErrorMsg and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ServerErrorMsg`.
pub unsafe fn size_prefixed_root_as_server_error_msg_unchecked(buf: &[u8]) -> ServerErrorMsg {
  flatbuffers::size_prefixed_root_unchecked::<ServerErrorMsg>(buf)
}
#[inline]
pub fn finish_server_error_msg_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ServerErrorMsg<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_server_error_msg_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ServerErrorMsg<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
