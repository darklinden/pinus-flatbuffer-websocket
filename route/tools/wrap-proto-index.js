const fs = require('fs');
const path = require('path');

function walkDirSync(root, ext, relative = '') {
    const full = path.join(root, relative);
    const files = [];
    fs.readdirSync(full).forEach(f => {
        if (fs.statSync(path.join(full, f))?.isDirectory())
            files.push(...walkDirSync(root, ext, path.join(relative, f)));
        else
            if (path.extname(f) == ext)
                files.push(path.join(relative, f));
    });
    return files;
}

// 协议生成代码文件夹 namespace proto
{
    let includes = '';
    let clazzes = [];

    const proto = path.join(__dirname, '..', 'src', 'proto');
    fs.readdirSync(proto).forEach(file => {

        console.log('deal with file: ' + file);
        const full = path.join(proto, file);

        if (full.endsWith('.ts') && !full.includes('internal.ts')) {

            const export_objs = [];
            const content = fs.readFileSync(full, 'utf-8');
            const lines = content.split('\n');
            for (const line of lines) {

                const mc = line.match(/export class (\w+) (implements .* )*{/);
                if (mc) {
                    console.log('   class: ' + mc[1]);
                    export_objs.push(mc[1]);
                }

                const me = line.match(/export enum (\w+) {/);
                if (me) {
                    console.log('   enum: ' + me[1]);
                    export_objs.push(me[1]);
                }
            }

            if (export_objs.length > 0) {
                const bn = file.substring(0, file.length - 3);
                let rename = '';
                for (const obj of export_objs) {
                    rename += `${obj} as ${obj}_, `;
                }

                includes += `import { ${rename} } from './${bn}';\n`;
                clazzes.push(...export_objs);
            }
        }
    });

    let content = `// This file is auto-generated by tools/wrap-index.js\n\n`;
    content += includes;
    content += `export namespace proto {\n`;
    for (const clazz of clazzes) {
        content += `export const ${clazz} = ${clazz}_;\n`;
        content += `export type I${clazz} = ${clazz}_;\n`;
    }
    content += `}\n`;

    const internal_path = path.join(proto, 'internal.ts');
    fs.writeFileSync(internal_path, content);
}