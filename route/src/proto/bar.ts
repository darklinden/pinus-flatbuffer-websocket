// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Bar implements flatbuffers.IUnpackableObject<BarT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Bar {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:Bar):Bar {
  return (obj || new Bar()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:Bar):Bar {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Bar()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

bar():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startBar(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBar(builder:flatbuffers.Builder, bar:bigint) {
  builder.addFieldInt64(0, bar, BigInt('0'));
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static create(builder:flatbuffers.Builder, bar:bigint):flatbuffers.Offset {
  Bar.startBar(builder);
  Bar.addBar(builder, bar);
  return Bar.end(builder);
}

unpack?(): BarT {
  return new BarT(
    this.bar()
  );
}


unpackTo(_o: BarT): void {
  _o.bar = this.bar();
}
}

export class BarT implements flatbuffers.IGeneratedObject {
constructor(
  public bar: bigint = BigInt('0')
){}


pack?(builder:flatbuffers.Builder): flatbuffers.Offset {
  return Bar.create(builder,
    this.bar
  );
}
}
