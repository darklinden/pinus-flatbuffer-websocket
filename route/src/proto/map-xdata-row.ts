// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec3, Vec3T } from '../proto/vec3.js';


export class MapXDataRow implements flatbuffers.IUnpackableObject<MapXDataRowT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MapXDataRow {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:MapXDataRow):MapXDataRow {
  return (obj || new MapXDataRow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:MapXDataRow):MapXDataRow {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MapXDataRow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

camp1(index: number, obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

camp1Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

camp2(index: number, obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec3()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

camp2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMapXDataRow(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static addCamp1(builder:flatbuffers.Builder, camp1Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, camp1Offset, 0);
}

static createCamp1Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCamp1Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCamp2(builder:flatbuffers.Builder, camp2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(3, camp2Offset, 0);
}

static createCamp2Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCamp2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static create(builder:flatbuffers.Builder, id:number, nameOffset:flatbuffers.Offset, camp1Offset:flatbuffers.Offset, camp2Offset:flatbuffers.Offset):flatbuffers.Offset {
  MapXDataRow.startMapXDataRow(builder);
  MapXDataRow.addId(builder, id);
  MapXDataRow.addName(builder, nameOffset);
  MapXDataRow.addCamp1(builder, camp1Offset);
  MapXDataRow.addCamp2(builder, camp2Offset);
  return MapXDataRow.end(builder);
}

unpack?(): MapXDataRowT {
  return new MapXDataRowT(
    this.id(),
    this.name(),
    this.bb!.createObjList<Vec3, Vec3T>(this.camp1.bind(this), this.camp1Length()),
    this.bb!.createObjList<Vec3, Vec3T>(this.camp2.bind(this), this.camp2Length())
  );
}


unpackTo(_o: MapXDataRowT): void {
  _o.id = this.id();
  _o.name = this.name();
  _o.camp1 = this.bb!.createObjList<Vec3, Vec3T>(this.camp1.bind(this), this.camp1Length());
  _o.camp2 = this.bb!.createObjList<Vec3, Vec3T>(this.camp2.bind(this), this.camp2Length());
}
}

export class MapXDataRowT implements flatbuffers.IGeneratedObject {
constructor(
  public id: number = 0,
  public name: string|Uint8Array|null = null,
  public camp1: (Vec3T)[] = [],
  public camp2: (Vec3T)[] = []
){}


pack?(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const camp1 = MapXDataRow.createCamp1Vector(builder, builder.createObjectOffsetList(this.camp1));
  const camp2 = MapXDataRow.createCamp2Vector(builder, builder.createObjectOffsetList(this.camp2));

  return MapXDataRow.create(builder,
    this.id,
    name,
    camp1,
    camp2
  );
}
}
