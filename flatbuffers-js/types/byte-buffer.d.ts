import { Offset, Table, IGeneratedObject, IUnpackableObject } from "./types.js";
import { Encoding } from "./encoding.js";
export declare class ByteBuffer {
    private bytes_;
    private position_;
    private text_decoder_;
    constructor(bytes_: Uint8Array);
    static allocate(byte_size: number): ByteBuffer;
    clear(): void;
    bytes(): Uint8Array;
    position(): number;
    setPosition(position: number): void;
    capacity(): number;
    readInt8(offset: number): number;
    readUint8(offset: number): number;
    readInt16(offset: number): number;
    readUint16(offset: number): number;
    readInt32(offset: number): number;
    readUint32(offset: number): number;
    readInt64(offset: number): bigint;
    readUint64(offset: number): bigint;
    readFloat32(offset: number): number;
    readFloat64(offset: number): number;
    writeInt8(offset: number, value: number): void;
    writeUint8(offset: number, value: number): void;
    writeInt16(offset: number, value: number): void;
    writeUint16(offset: number, value: number): void;
    writeInt32(offset: number, value: number): void;
    writeUint32(offset: number, value: number): void;
    writeInt64(offset: number, value: bigint): void;
    writeUint64(offset: number, value: bigint): void;
    writeFloat32(offset: number, value: number): void;
    writeFloat64(offset: number, value: number): void;
    getBufferIdentifier(): string;
    __offset(bb_pos: number, vtable_offset: number): Offset;
    __union(t: Table, offset: number): Table;
    __string(offset: number, opt_encoding?: Encoding): string | Uint8Array;
    __union_with_string(o: Table | string, offset: number): Table | string;
    __indirect(offset: Offset): Offset;
    __vector(offset: Offset): Offset;
    __vector_len(offset: Offset): Offset;
    __has_identifier(ident: string): boolean;
    createScalarList<T>(listAccessor: (i: number) => T | null, listLength: number): T[];
    createObjList<T1 extends IUnpackableObject<T2>, T2 extends IGeneratedObject>(listAccessor: (i: number) => T1 | null, listLength: number): T2[];
}
