// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { ServerErrorType } from './server-error-type.js';


export class ServerErrorMsgRow implements flatbuffers.IUnpackableObject<ServerErrorMsgRowT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerErrorMsgRow {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:ServerErrorMsgRow):ServerErrorMsgRow {
  return (obj || new ServerErrorMsgRow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:ServerErrorMsgRow):ServerErrorMsgRow {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerErrorMsgRow()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errCode():ServerErrorType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : ServerErrorType.ERR_SUCCESS;
}

errMsg():string|null
errMsg(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
errMsg(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startServerErrorMsgRow(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addErrCode(builder:flatbuffers.Builder, errCode:ServerErrorType) {
  builder.addFieldInt32(0, errCode, ServerErrorType.ERR_SUCCESS);
}

static addErrMsg(builder:flatbuffers.Builder, errMsgOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, errMsgOffset, 0);
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static create(builder:flatbuffers.Builder, errCode:ServerErrorType, errMsgOffset:flatbuffers.Offset):flatbuffers.Offset {
  ServerErrorMsgRow.startServerErrorMsgRow(builder);
  ServerErrorMsgRow.addErrCode(builder, errCode);
  ServerErrorMsgRow.addErrMsg(builder, errMsgOffset);
  return ServerErrorMsgRow.end(builder);
}

unpack?(): ServerErrorMsgRowT {
  return new ServerErrorMsgRowT(
    this.errCode(),
    this.errMsg()
  );
}


unpackTo(_o: ServerErrorMsgRowT): void {
  _o.errCode = this.errCode();
  _o.errMsg = this.errMsg();
}
}

export class ServerErrorMsgRowT implements flatbuffers.IGeneratedObject {
constructor(
  public errCode: ServerErrorType = ServerErrorType.ERR_SUCCESS,
  public errMsg: string|Uint8Array|null = null
){}


pack?(builder:flatbuffers.Builder): flatbuffers.Offset {
  const errMsg = (this.errMsg !== null ? builder.createString(this.errMsg!) : 0);

  return ServerErrorMsgRow.create(builder,
    this.errCode,
    errMsg
  );
}
}
