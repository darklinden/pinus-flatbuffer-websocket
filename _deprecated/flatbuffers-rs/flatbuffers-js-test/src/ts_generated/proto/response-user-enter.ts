// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { UserInfo, UserInfoT } from './user-info.js';


export class ResponseUserEnter implements flatbuffers.IUnpackableObject<ResponseUserEnterT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseUserEnter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:ResponseUserEnter):ResponseUserEnter {
  return (obj || new ResponseUserEnter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:ResponseUserEnter):ResponseUserEnter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseUserEnter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

code():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

user(obj?:UserInfo):UserInfo|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new UserInfo()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startResponseUserEnter(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCode(builder:flatbuffers.Builder, code:number) {
  builder.addFieldInt32(0, code, 0);
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, userOffset, 0);
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack?(): ResponseUserEnterT {
  return new ResponseUserEnterT(
    this.code(),
    (this.user() !== null ? this.user()!.unpack() : null)
  );
}


unpackTo(_o: ResponseUserEnterT): void {
  _o.code = this.code();
  _o.user = (this.user() !== null ? this.user()!.unpack() : null);
}
}

export class ResponseUserEnterT implements flatbuffers.IGeneratedObject {
constructor(
  public code: number = 0,
  public user: UserInfoT|null = null
){}


pack?(builder:flatbuffers.Builder): flatbuffers.Offset {
  const user = (this.user !== null ? this.user!.pack(builder) : 0);

  ResponseUserEnter.startResponseUserEnter(builder);
  ResponseUserEnter.addCode(builder, this.code);
  ResponseUserEnter.addUser(builder, user);

  return ResponseUserEnter.end(builder);
}
}
