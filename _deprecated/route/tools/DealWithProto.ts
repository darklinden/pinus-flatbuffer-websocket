import { promises as fs } from "fs";
import * as path from "path";
import { relativeCopy, walkDir } from "./FileUtil";

const project_root = path.join(__dirname, '..');

export async function copyProtoAndWrapInternal() {

    const src_path = path.join(project_root, '..', 'proto', 'generated', 'ts', 'proto');
    const proto = path.join(project_root, 'src', 'proto');

    await fs.mkdir(proto, { recursive: true });

    await relativeCopy(src_path, proto, ['.ts'], true);

    let includes = '';
    let clazzes: string[] = [];

    const files = await walkDir(proto, ['.ts']);

    for (const file of files) {

        console.log('deal with file: ' + file);
        const full = path.join(proto, file);

        const export_objs: string[] = [];
        const content = await fs.readFile(full, 'utf-8');
        const lines = content.split('\n');
        for (const line of lines) {

            const mc = line.match(/export class (\w+) (implements .* )*{/);
            if (mc) {
                console.log('   class: ' + mc[1]);
                export_objs.push(mc[1]);
            }

            const me = line.match(/export enum (\w+) {/);
            if (me) {
                console.log('   enum: ' + me[1]);
                export_objs.push(me[1]);
            }
        }

        if (export_objs.length > 0) {
            const bn = file.substring(0, file.length - 3);
            let rename = '';
            for (const obj of export_objs) {
                rename += `${obj} as ${obj}_, `;
            }

            includes += `import { ${rename} } from './${bn}';\n`;
            clazzes.push(...export_objs);
        }
    }

    let content = `// This file is auto-generated by route \n\n`;
    content += includes;
    content += `export namespace proto {\n`;
    for (const clazz of clazzes) {
        content += `export const ${clazz} = ${clazz}_;\n`;
        content += `export type I${clazz} = ${clazz}_;\n`;
    }
    content += `}\n`;

    const internal_path = path.join(proto, 'internal.ts');
    await fs.writeFile(internal_path, content);
}
