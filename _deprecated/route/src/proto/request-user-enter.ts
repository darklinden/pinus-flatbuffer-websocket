// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class RequestUserEnter implements flatbuffers.IUnpackableObject<RequestUserEnterT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestUserEnter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:RequestUserEnter):RequestUserEnter {
  return (obj || new RequestUserEnter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:RequestUserEnter):RequestUserEnter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestUserEnter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

token():string|null
token(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
token(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRequestUserEnter(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addToken(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tokenOffset, 0);
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static create(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset):flatbuffers.Offset {
  RequestUserEnter.startRequestUserEnter(builder);
  RequestUserEnter.addToken(builder, tokenOffset);
  return RequestUserEnter.end(builder);
}

unpack?(): RequestUserEnterT {
  return new RequestUserEnterT(
    this.token()
  );
}


unpackTo(_o: RequestUserEnterT): void {
  _o.token = this.token();
}
}

export class RequestUserEnterT implements flatbuffers.IGeneratedObject {
constructor(
  public token: string|Uint8Array|null = null
){}


pack?(builder:flatbuffers.Builder): flatbuffers.Offset {
  const token = (this.token !== null ? builder.createString(this.token!) : 0);

  return RequestUserEnter.create(builder,
    token
  );
}
}
