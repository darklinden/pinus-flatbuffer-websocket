// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ResponseUserEnterOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ResponseUserEnter<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ResponseUserEnter<'a> {
  type Inner = ResponseUserEnter<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ResponseUserEnter<'a> {
  pub const VT_CODE: flatbuffers::VOffsetT = 4;
  pub const VT_USER: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ResponseUserEnter"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ResponseUserEnter { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ResponseUserEnterArgs<'args>
  ) -> flatbuffers::WIPOffset<ResponseUserEnter<'bldr>> {
    let mut builder = ResponseUserEnterBuilder::new(_fbb);
    if let Some(x) = args.user { builder.add_user(x); }
    builder.add_code(args.code);
    builder.finish()
  }

  pub fn unpack(&self) -> ResponseUserEnterT {
    let code = self.code();
    let user = self.user().map(|x| {
      Box::new(x.unpack())
    });
    ResponseUserEnterT {
      code,
      user,
    }
  }

  #[inline]
  pub fn code(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ResponseUserEnter::VT_CODE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn user(&self) -> Option<UserInfo<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<UserInfo>>(ResponseUserEnter::VT_USER, None)}
  }
}

impl flatbuffers::Verifiable for ResponseUserEnter<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("code", Self::VT_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<UserInfo>>("user", Self::VT_USER, false)?
     .finish();
    Ok(())
  }
}
pub struct ResponseUserEnterArgs<'a> {
    pub code: i32,
    pub user: Option<flatbuffers::WIPOffset<UserInfo<'a>>>,
}
impl<'a> Default for ResponseUserEnterArgs<'a> {
  #[inline]
  fn default() -> Self {
    ResponseUserEnterArgs {
      code: 0,
      user: None,
    }
  }
}

pub struct ResponseUserEnterBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ResponseUserEnterBuilder<'a, 'b> {
  #[inline]
  pub fn add_code(&mut self, code: i32) {
    self.fbb_.push_slot::<i32>(ResponseUserEnter::VT_CODE, code, 0);
  }
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<UserInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<UserInfo>>(ResponseUserEnter::VT_USER, user);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ResponseUserEnterBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ResponseUserEnterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ResponseUserEnter<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ResponseUserEnter<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ResponseUserEnter");
      ds.field("code", &self.code());
      ds.field("user", &self.user());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ResponseUserEnterT {
  pub code: i32,
  pub user: Option<Box<UserInfoT>>,
}
impl Default for ResponseUserEnterT {
  fn default() -> Self {
    Self {
      code: 0,
      user: None,
    }
  }
}
impl ResponseUserEnterT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<ResponseUserEnter<'b>> {
    let code = self.code;
    let user = self.user.as_ref().map(|x|{
      x.pack(_fbb)
    });
    ResponseUserEnter::create(_fbb, &ResponseUserEnterArgs{
      code,
      user,
    })
  }
}
