// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { MapXDataRow, MapXDataRowT } from './map-xdata-row.js';


export class MapXData implements flatbuffers.IUnpackableObject<MapXDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MapXData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRoot(bb:flatbuffers.ByteBuffer, obj?:MapXData):MapXData {
  return (obj || new MapXData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRoot(bb:flatbuffers.ByteBuffer, obj?:MapXData):MapXData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MapXData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rows(index: number, obj?:MapXDataRow):MapXDataRow|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new MapXDataRow()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

rowsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startMapXData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRows(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, rowsOffset, 0);
}

static createRowsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startRowsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static end(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishMapXDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedMapXDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static create(builder:flatbuffers.Builder, rowsOffset:flatbuffers.Offset):flatbuffers.Offset {
  MapXData.startMapXData(builder);
  MapXData.addRows(builder, rowsOffset);
  return MapXData.end(builder);
}

unpack?(): MapXDataT {
  return new MapXDataT(
    this.bb!.createObjList<MapXDataRow, MapXDataRowT>(this.rows.bind(this), this.rowsLength())
  );
}


unpackTo(_o: MapXDataT): void {
  _o.rows = this.bb!.createObjList<MapXDataRow, MapXDataRowT>(this.rows.bind(this), this.rowsLength());
}
}

export class MapXDataT implements flatbuffers.IGeneratedObject {
constructor(
  public rows: (MapXDataRowT)[] = []
){}


pack?(builder:flatbuffers.Builder): flatbuffers.Offset {
  const rows = MapXData.createRowsVector(builder, builder.createObjectOffsetList(this.rows));

  return MapXData.create(builder,
    rows
  );
}
}
