// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerErrorMsgRowOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerErrorMsgRow<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerErrorMsgRow<'a> {
  type Inner = ServerErrorMsgRow<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerErrorMsgRow<'a> {
  pub const VT_ERR_CODE: flatbuffers::VOffsetT = 4;
  pub const VT_ERR_MSG: flatbuffers::VOffsetT = 6;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.ServerErrorMsgRow"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerErrorMsgRow { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ServerErrorMsgRowArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerErrorMsgRow<'bldr>> {
    let mut builder = ServerErrorMsgRowBuilder::new(_fbb);
    if let Some(x) = args.err_msg { builder.add_err_msg(x); }
    builder.add_err_code(args.err_code);
    builder.finish()
  }

  pub fn unpack(&self) -> ServerErrorMsgRowT {
    let err_code = self.err_code();
    let err_msg = self.err_msg().map(|x| {
      x.to_string()
    });
    ServerErrorMsgRowT {
      err_code,
      err_msg,
    }
  }

  #[inline]
  pub fn err_code(&self) -> ServerErrorType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ServerErrorType>(ServerErrorMsgRow::VT_ERR_CODE, Some(ServerErrorType::ERR_SUCCESS)).unwrap()}
  }
  #[inline]
  pub fn err_msg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServerErrorMsgRow::VT_ERR_MSG, None)}
  }
}

impl flatbuffers::Verifiable for ServerErrorMsgRow<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<ServerErrorType>("err_code", Self::VT_ERR_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("err_msg", Self::VT_ERR_MSG, false)?
     .finish();
    Ok(())
  }
}
pub struct ServerErrorMsgRowArgs<'a> {
    pub err_code: ServerErrorType,
    pub err_msg: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ServerErrorMsgRowArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerErrorMsgRowArgs {
      err_code: ServerErrorType::ERR_SUCCESS,
      err_msg: None,
    }
  }
}

pub struct ServerErrorMsgRowBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ServerErrorMsgRowBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_err_code(&mut self, err_code: ServerErrorType) {
    self.fbb_.push_slot::<ServerErrorType>(ServerErrorMsgRow::VT_ERR_CODE, err_code, ServerErrorType::ERR_SUCCESS);
  }
  #[inline]
  pub fn add_err_msg(&mut self, err_msg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerErrorMsgRow::VT_ERR_MSG, err_msg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ServerErrorMsgRowBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ServerErrorMsgRowBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerErrorMsgRow<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerErrorMsgRow<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerErrorMsgRow");
      ds.field("err_code", &self.err_code());
      ds.field("err_msg", &self.err_msg());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ServerErrorMsgRowT {
  pub err_code: ServerErrorType,
  pub err_msg: Option<String>,
}
impl Default for ServerErrorMsgRowT {
  fn default() -> Self {
    Self {
      err_code: ServerErrorType::ERR_SUCCESS,
      err_msg: None,
    }
  }
}
impl ServerErrorMsgRowT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ServerErrorMsgRow<'b>> {
    let err_code = self.err_code;
    let err_msg = self.err_msg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ServerErrorMsgRow::create(_fbb, &ServerErrorMsgRowArgs{
      err_code,
      err_msg,
    })
  }
}
