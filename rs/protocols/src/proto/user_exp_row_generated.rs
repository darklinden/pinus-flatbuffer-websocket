// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum UserExpRowOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UserExpRow<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserExpRow<'a> {
  type Inner = UserExpRow<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UserExpRow<'a> {
  pub const VT_LEVEL: flatbuffers::VOffsetT = 4;
  pub const VT_EXP: flatbuffers::VOffsetT = 6;
  pub const VT_EXP_TOTAL: flatbuffers::VOffsetT = 8;

  pub const fn get_fully_qualified_name() -> &'static str {
    "Proto.UserExpRow"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UserExpRow { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UserExpRowArgs
  ) -> flatbuffers::WIPOffset<UserExpRow<'bldr>> {
    let mut builder = UserExpRowBuilder::new(_fbb);
    builder.add_exp_total(args.exp_total);
    builder.add_exp(args.exp);
    builder.add_level(args.level);
    builder.finish()
  }

  pub fn unpack(&self) -> UserExpRowT {
    let level = self.level();
    let exp = self.exp();
    let exp_total = self.exp_total();
    UserExpRowT {
      level,
      exp,
      exp_total,
    }
  }

  #[inline]
  pub fn level(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UserExpRow::VT_LEVEL, Some(0)).unwrap()}
  }
  #[inline]
  pub fn exp(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(UserExpRow::VT_EXP, Some(0)).unwrap()}
  }
  #[inline]
  pub fn exp_total(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(UserExpRow::VT_EXP_TOTAL, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for UserExpRow<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("level", Self::VT_LEVEL, false)?
     .visit_field::<i64>("exp", Self::VT_EXP, false)?
     .visit_field::<i64>("exp_total", Self::VT_EXP_TOTAL, false)?
     .finish();
    Ok(())
  }
}
pub struct UserExpRowArgs {
    pub level: i32,
    pub exp: i64,
    pub exp_total: i64,
}
impl<'a> Default for UserExpRowArgs {
  #[inline]
  fn default() -> Self {
    UserExpRowArgs {
      level: 0,
      exp: 0,
      exp_total: 0,
    }
  }
}

pub struct UserExpRowBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UserExpRowBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_level(&mut self, level: i32) {
    self.fbb_.push_slot::<i32>(UserExpRow::VT_LEVEL, level, 0);
  }
  #[inline]
  pub fn add_exp(&mut self, exp: i64) {
    self.fbb_.push_slot::<i64>(UserExpRow::VT_EXP, exp, 0);
  }
  #[inline]
  pub fn add_exp_total(&mut self, exp_total: i64) {
    self.fbb_.push_slot::<i64>(UserExpRow::VT_EXP_TOTAL, exp_total, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UserExpRowBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UserExpRowBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UserExpRow<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UserExpRow<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UserExpRow");
      ds.field("level", &self.level());
      ds.field("exp", &self.exp());
      ds.field("exp_total", &self.exp_total());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct UserExpRowT {
  pub level: i32,
  pub exp: i64,
  pub exp_total: i64,
}
impl Default for UserExpRowT {
  fn default() -> Self {
    Self {
      level: 0,
      exp: 0,
      exp_total: 0,
    }
  }
}
impl UserExpRowT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<UserExpRow<'b>> {
    let level = self.level;
    let exp = self.exp;
    let exp_total = self.exp_total;
    UserExpRow::create(_fbb, &UserExpRowArgs{
      level,
      exp,
      exp_total,
    })
  }
}
